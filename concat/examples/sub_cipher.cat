# IGNORE
# IN: ''
# OUT: 'The original is: A simple example.\nEncoding it with the key: |\nx$NB"uqbJK[\x0c7Q4,P0S?6@>Z^n)9=}\'mMV.X /*i;IOdc<Hl\rvFCwt2pY_fD#Wg&r3ajz1h-osT]%(\t\\{E~ykGA5UL:!`+eR\x0b8\nGives: .`)P6Z?7`7mJ6Z?7s\nDecoding it by the same key gives: A simple example.\n'
# FIXME: Support an object type syntax so that I can cast values to have needed
# attributes.
# based on the python answer in rosetta code

from concat.stdlib.pyinterop import to_dict
from string import printable
import random as py_random


def type py_random_type:
    {
        seed: py_function[(_:int), none],
        shuffle: forall `t. py_function[(_:list[`t]), list[`t]]
    }


def random( -- module:py_random_type):
    $py_random cast (py_random_type)


def seed(--):
    [,] to_dict [334344,] random$.seed py_call drop


def shuffle(lst:list[`t] -- lst):
    # QUESTION: Should I even track Python function argument types if I don't
    # use the positional parameter types and have no keyword parameter types nor
    # optional parameters?
    [,] to_dict [swap,] random$.shuffle py_call drop


seed  # set seed for reproducibility

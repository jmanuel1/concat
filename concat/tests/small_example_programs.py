from concat.lex import to_tokens

# The newlines in each example are important.

examples = {
    'None\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'None', (1, 0), (1, 4)),
        ('NEWLINE', '\n', (1, 4), (1, 5)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'NotImplemented\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'NotImplemented', (1, 0), (1, 14)),
        ('NEWLINE', '\n', (1, 14), (1, 15)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '... Ellipsis\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', '...', (1, 0), (1, 3)),
        ('NAME', 'Ellipsis', (1, 4), (1, 12)),
        ('NEWLINE', '\n', (1, 12), (1, 13)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    "b'bytes'\n": to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('BYTES', "b'bytes'", (1, 0), (1, 8)),
        ('NEWLINE', '\n', (1, 8), (1, 9)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '(5,)\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('LPAR', '(', (1, 0), (1, 1)),
        ('NUMBER', '5', (1, 1), (1, 2)),
        ('COMMA', ',', (1, 2), (1, 3)),
        ('RPAR', ')', (1, 3), (1, 4)),
        ('NEWLINE', '\n', (1, 4), (1, 5)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '[,]\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('LSQB', '[', (1, 0), (1, 1)),
        ('COMMA', ',', (1, 1), (1, 2)),
        ('RSQB', ']', (1, 2), (1, 3)),
        ('NEWLINE', '\n', (1, 3), (1, 4)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '(1,2,3)\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('LPAR', '(', (1, 0), (1, 1)),
        ('NUMBER', '1', (1, 1), (1, 2)),
        ('COMMA', ',', (1, 2), (1, 3)),
        ('NUMBER', '2', (1, 3), (1, 4)),
        ('COMMA', ',', (1, 4), (1, 5)),
        ('NUMBER', '3', (1, 5), (1, 6)),
        ('RPAR', ')', (1, 6), (1, 7)),
        ('NEWLINE', '\n', (1, 7), (1, 8)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '(1,2,)\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('LPAR', '(', (1, 0), (1, 1)),
        ('NUMBER', '1', (1, 1), (1, 2)),
        ('COMMA', ',', (1, 2), (1, 3)),
        ('NUMBER', '2', (1, 3), (1, 4)),
        ('COMMA', ',', (1, 4), (1, 5)),
        ('RPAR', ')', (1, 5), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'word await\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'word', (1, 0), (1, 4)),
        ('NAME', 'await', (1, 5), (1, 10)),
        ('NEWLINE', '\n', (1, 10), (1, 11)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'import a.submodule\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('IMPORT', 'import', (1, 0), (1, 6), True),
        ('NAME', 'a', (1, 7), (1, 8)),
        ('DOT', '.', (1, 8), (1, 9)),
        ('NAME', 'submodule', (1, 9), (1, 18)),
        ('NEWLINE', '\n', (1, 18), (1, 19)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'import a as b\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('IMPORT', 'import', (1, 0), (1, 6), True),
        ('NAME', 'a', (1, 7), (1, 8)),
        ('AS', 'as', (1, 9), (1, 11), True),
        ('NAME', 'b', (1, 12), (1, 13)),
        ('NEWLINE', '\n', (1, 13), (1, 14)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'from .a import b\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('FROM', 'from', (1, 0), (1, 4), True),
        ('DOT', '.', (1, 5), (1, 6)),
        ('NAME', 'a', (1, 6), (1, 7)),
        ('IMPORT', 'import', (1, 8), (1, 14), True),
        ('NAME', 'b', (1, 15), (1, 16)),
        ('NEWLINE', '\n', (1, 16), (1, 17)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'from .a import b as c\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('FROM', 'from', (1, 0), (1, 4), True),
        ('DOT', '.', (1, 5), (1, 6)),
        ('NAME', 'a', (1, 6), (1, 7)),
        ('IMPORT', 'import', (1, 8), (1, 14), True),
        ('NAME', 'b', (1, 15), (1, 16)),
        ('AS', 'as', (1, 17), (1, 19), True),
        ('NAME', 'c', (1, 20), (1, 21)),
        ('NEWLINE', '\n', (1, 21), (1, 22)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'from a import *\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('FROM', 'from', (1, 0), (1, 4), True),
        ('NAME', 'a', (1, 5), (1, 6)),
        ('IMPORT', 'import', (1, 7), (1, 13), True),
        # FIXME: * is a valid name, so come up with a different syntax
        # Consider `import a.*` since I'm not making `*` a valid module name
        ('NAME', '*', (1, 14), (1, 15)),
        ('NEWLINE', '\n', (1, 15), (1, 16)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '`': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('BACKTICK', '`', (1, 0), (1, 1)),
        ('NEWLINE', '', (1, 1), (1, 2)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '!': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('EXCLAMATIONMARK', '!', (1, 0), (1, 1)),
        ('NEWLINE', '', (1, 1), (1, 2)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'class A: pass\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('CLASS', 'class', (1, 0), (1, 5), True),
        ('NAME', 'A', (1, 6), (1, 7)),
        ('COLON', ':', (1, 7), (1, 8)),
        ('NAME', 'pass', (1, 9), (1, 13)),
        ('NEWLINE', '\n', (1, 13), (1, 14)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'class A @decorator: pass\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('CLASS', 'class', (1, 0), (1, 5), True),
        ('NAME', 'A', (1, 6), (1, 7)),
        ('NAME', '@', (1, 8), (1, 9)),
        ('NAME', 'decorator', (1, 9), (1, 18)),
        ('COLON', ':', (1, 18), (1, 19)),
        ('NAME', 'pass', (1, 20), (1, 24)),
        ('NEWLINE', '\n', (1, 24), (1, 25)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'class A($B,): pass\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('CLASS', 'class', (1, 0), (1, 5), True),
        ('NAME', 'A', (1, 6), (1, 7)),
        ('LPAR', '(', (1, 7), (1, 8)),
        ('DOLLARSIGN', '$', (1, 8), (1, 9)),
        ('NAME', 'B', (1, 9), (1, 10)),
        ('COMMA', ',', (1, 10), (1, 11)),
        ('RPAR', ')', (1, 11), (1, 12)),
        ('COLON', ':', (1, 12), (1, 13)),
        ('NAME', 'pass', (1, 14), (1, 18)),
        ('NEWLINE', '\n', (1, 18), (1, 19)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'class A metaclass=$M: pass\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('CLASS', 'class', (1, 0), (1, 5), True),
        ('NAME', 'A', (1, 6), (1, 7)),
        ('NAME', 'metaclass', (1, 8), (1, 17)),
        ('EQUAL', '=', (1, 17), (1, 18)),
        ('DOLLARSIGN', '$', (1, 18), (1, 19)),
        ('NAME', 'M', (1, 19), (1, 20)),
        ('COLON', ':', (1, 20), (1, 21)),
        ('NAME', 'pass', (1, 22), (1, 26)),
        ('NEWLINE', '\n', (1, 26), (1, 27)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '2 4 **\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '2', (1, 0), (1, 1)),
        ('NUMBER', '4', (1, 2), (1, 3)),
        ('NAME', '**', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '0 ~\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '0', (1, 0), (1, 1)),
        ('NAME', '~', (1, 2), (1, 3)),
        ('NEWLINE', '\n', (1, 3), (1, 4)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '6 9 *\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '6', (1, 0), (1, 1)),
        ('NUMBER', '9', (1, 2), (1, 3)),
        ('NAME', '*', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'A B @\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'A', (1, 0), (1, 1)),
        ('NAME', 'B', (1, 2), (1, 3)),
        ('NAME', '@', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 //\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '//', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 /\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '/', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 %\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '%', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 +\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '+', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 -\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '-', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 <<\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '<<', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 >>\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '>>', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 &\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '&', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 ^\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '^', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 |\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '|', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 <\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '<', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 >\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '>', (1, 4), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 ==\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '==', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 >=\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '>=', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 <=\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '<=', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 !=\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', '!=', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 2 is\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NUMBER', '2', (1, 2), (1, 3)),
        ('NAME', 'is', (1, 4), (1, 6)),
        ('NEWLINE', '\n', (1, 6), (1, 7)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 $() in\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('DOLLARSIGN', '$', (1, 2), (1, 3)),
        ('LPAR', '(', (1, 3), (1, 4)),
        ('RPAR', ')', (1, 4), (1, 5)),
        ('NAME', 'in', (1, 6), (1, 8)),
        ('NEWLINE', '\n', (1, 8), (1, 9)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 $() or\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('DOLLARSIGN', '$', (1, 2), (1, 3)),
        ('LPAR', '(', (1, 3), (1, 4)),
        ('RPAR', ')', (1, 4), (1, 5)),
        ('NAME', 'or', (1, 6), (1, 8)),
        ('NEWLINE', '\n', (1, 8), (1, 9)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 $() and\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('DOLLARSIGN', '$', (1, 2), (1, 3)),
        ('LPAR', '(', (1, 3), (1, 4)),
        ('RPAR', ')', (1, 4), (1, 5)),
        ('NAME', 'and', (1, 6), (1, 9)),
        ('NEWLINE', '\n', (1, 9), (1, 10)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '1 not\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NUMBER', '1', (1, 0), (1, 1)),
        ('NAME', 'not', (1, 2), (1, 5)),
        ('NEWLINE', '\n', (1, 5), (1, 6)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'True assert\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'True', (1, 0), (1, 4)),
        ('NAME', 'assert', (1, 5), (1, 11)),
        ('NEWLINE', '\n', (1, 11), (1, 12)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'None AnException raise\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('NAME', 'None', (1, 0), (1, 4)),
        ('NAME', 'AnException', (1, 5), (1, 16)),
        ('NAME', 'raise', (1, 17), (1, 22)),
        ('NEWLINE', '\n', (1, 22), (1, 23)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '$() $() try\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DOLLARSIGN', '$', (1, 0), (1, 1)),
        ('LPAR', '(', (1, 1), (1, 2)),
        ('RPAR', ')', (1, 2), (1, 3)),
        ('DOLLARSIGN', '$', (1, 4), (1, 5)),
        ('LPAR', '(', (1, 5), (1, 6)),
        ('RPAR', ')', (1, 6), (1, 7)),
        ('NAME', 'try', (1, 8), (1, 11)),
        ('NEWLINE', '\n', (1, 11), (1, 12)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '$() ctxmgr with\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DOLLARSIGN', '$', (1, 0), (1, 1)),
        ('LPAR', '(', (1, 1), (1, 2)),
        ('RPAR', ')', (1, 2), (1, 3)),
        ('NAME', 'ctxmgr', (1, 4), (1, 10)),
        ('NAME', 'with', (1, 11), (1, 15)),
        ('NEWLINE', '\n', (1, 15), (1, 16)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    'def f(a b -- c): ()\n': to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DEF', 'def', (1, 0), (1, 3), True),
        ('NAME', 'f', (1, 4), (1, 5)),
        ('LPAR', '(', (1, 5), (1, 6)),
        ('NAME', 'a', (1, 6), (1, 7)),
        ('NAME', 'b', (1, 8), (1, 9)),
        ('MINUSMINUS', '--', (1, 10), (1, 12)),
        ('NAME', 'c', (1, 13), (1, 14)),
        ('RPAR', ')', (1, 14), (1, 15)),
        ('COLON', ':', (1, 15), (1, 16)),
        ('LPAR', '(', (1, 17), (1, 18)),
        ('RPAR', ')', (1, 18), (1, 19)),
        ('NEWLINE', '\n', (1, 19), (1, 20)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    '$() $(0) bool\n': to_tokens(  # newline is important
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DOLLARSIGN', '$', (1, 0), (1, 1)),
        ('LPAR', '(', (1, 1), (1, 2)),
        ('RPAR', ')', (1, 2), (1, 3)),
        ('DOLLARSIGN', '$', (1, 4), (1, 5)),
        ('LPAR', '(', (1, 5), (1, 6)),
        ('NUMBER', '0', (1, 6), (1, 7)),
        ('RPAR', ')', (1, 7), (1, 8)),
        ('NAME', 'bool', (1, 9), (1, 13)),
        ('NEWLINE', '\n', (1, 13), (1, 14)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    "$() $('This is a string') len\n": to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DOLLARSIGN', '$', (1, 0), (1, 1)),
        ('LPAR', '(', (1, 1), (1, 2)),
        ('RPAR', ')', (1, 2), (1, 3)),
        ('DOLLARSIGN', '$', (1, 4), (1, 5)),
        ('LPAR', '(', (1, 5), (1, 6)),
        ('STRING', "'This is a string'", (1, 6), (1, 24)),
        ('RPAR', ')', (1, 24), (1, 25)),
        ('NAME', 'len', (1, 26), (1, 29)),
        ('NEWLINE', '\n', (1, 29), (1, 30)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
    "$() $('Strings' 'interpolated') '{} can be {}'.format\n": to_tokens(
        ('ENCODING', 'utf-8', (0, 0), (0, 0)),
        ('DOLLARSIGN', '$', (1, 0), (1, 1)),
        ('LPAR', '(', (1, 1), (1, 2)),
        ('RPAR', ')', (1, 2), (1, 3)),
        ('DOLLARSIGN', '$', (1, 4), (1, 5)),
        ('LPAR', '(', (1, 5), (1, 6)),
        ('STRING', "'Strings'", (1, 6), (1, 15)),
        ('STRING', "'interpolated'", (1, 16), (1, 30)),
        ('RPAR', ')', (1, 30), (1, 31)),
        ('STRING', "'{} can be {}'", (1, 32), (1, 46)),
        ('DOT', '.', (1, 46), (1, 47)),
        ('NAME', 'format', (1, 47), (1, 53)),
        ('NEWLINE', '\n', (1, 53), (1, 54)),
        ('ENDMARKER', '', (2, 0), (2, 0)),
    ),
}

"""The Concat Implementation.""" drop


from concat.transpile import transpile
import concat.astutils
import concat.level1.execute
import concat.level1.typecheck
import concat.level1.stdlib.repl as repl
from concat.level2.stdlib.pyinterop import to_py_function
import argparse
import sys
import io
from typing import Callable
from typing import IO
from typing import AnyStr
from typing import TextIO


def file_type:
    """Capture the filename and create a list containing the file name and file object.""" drop

    $(dup [(), {'mode': 'r',} swap open]) curry


def seek_file:
    swap [(), (),] [,] swap pick $.seek py_call drop drop


def get_line_at:
    over 0 io$.SEEK_SET seek_file
    swap to_list
    # FIXME: We cast because we don't have *generic* interfaces for subtraction
    # and subscription.
    [[0] cast (int) 1 -]


def create_arg_parser:
    {'description': ()} [,] argparse$.ArgumentParser py_call


def add_argument:
    [(),] pick $.add_argument py_call drop drop


'Run a Concat program.' create_arg_parser

dup {'nargs': '?', 'type': $file_type to_py_function, 'default': sys$.stdin, 'help': 'file to run'} 'file' add_argument
dup {'action': 'store_true', 'default': False, 'help': 'turn stack debugging on'} '--debug' add_argument

$.parse_args [,] [,] pick py_call nip

# interactive mode
dup
$.file sys$.stdin is
$([,] [[,], [,], over $.debug] repl$.repl py_call drop)
$(
    [
      [concat.level1.typecheck$.NameError, $()],
    ]
    $($.file [,] [,] pick $.read py_call nip [(),] [,] swap $transpile py_call)
    try
)
choose  # FIXME: We should test for interactivity instead
# else:
#     try:
#         python_ast = transpile(args.file.read())
#     except concat.level1.typecheck.NameError as e:
#         print('Error:\n')
#         print(e, 'in line:')
#         print(get_line_at(args.file, e.location), end='')
#         print(' '*e.location[1] + '^')
#     except Exception:
#         print('An internal error has occurred.')
#         print('This is a bug in Concat.')
#         raise
#     else:
#         concat.level1.execute.execute(filename, python_ast, {})
#     finally:
#         args.file.close()

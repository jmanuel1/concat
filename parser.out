Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHTSHIFT
    RSQB
    GREATER
    NT_OFFSET
    RPAR
    DOUBLESTAREQUAL
    LESS
    COMMENT
    NOTEQUAL
    AT
    PLUSEQUAL
    CIRCUMFLEXEQUAL
    DOUBLESLASH
    SLASH
    ERRORTOKEN
    ATEQUAL
    SLASHEQUAL
    EQEQUAL
    CIRCUMFLEX
    VBAREQUAL
    RIGHTSHIFTEQUAL
    GREATEREQUAL
    LEFTSHIFT
    LPAR
    STAR
    STAREQUAL
    AMPEREQUAL
    LESSEQUAL
    DOUBLESLASHEQUAL
    PERCENTEQUAL
    ASYNC
    DOUBLESTAR
    LEFTSHIFTEQUAL
    MINEQUAL
    ELLIPSIS
    RARROW
    AMPER
    TILDE
    AWAIT
    OP
    COMMA
    VBAR
    EQUAL
    MINUS
    NL
    DOT
    LBRACE
    RBRACE
    PERCENT
    LSQB

Grammar

Rule 0     S' -> module
Rule 1     module -> module_encoding
Rule 2     module -> module_statement
Rule 3     module -> module_newline
Rule 4     module -> empty_module
Rule 5     empty_module -> empty
Rule 6     module_newline -> NEWLINE module
Rule 7     module_statement -> statement module ENDMARKER
Rule 8     module_statement -> statement module
Rule 9     module_encoding -> ENCODING module
Rule 10    statement -> terminated_stmt_list
Rule 11    statement -> compound_stmt
Rule 12    compound_stmt -> funcdef
Rule 13    funcdef -> DEF funcname COLON suite
Rule 14    funcname -> NAME
Rule 15    suite -> terminated_stmt_list
Rule 16    suite -> indented_block
Rule 17    terminated_stmt_list -> stmt_list NEWLINE
Rule 18    indented_block -> NEWLINE INDENT statement_plus DEDENT
Rule 19    statement_plus -> statement_statement_plus
Rule 20    statement_plus -> statement
Rule 21    statement_statement_plus -> statement statement_plus
Rule 22    stmt_list -> simple_stmt
Rule 23    stmt_list -> semi_stmt_list
Rule 24    stmt_list -> simple_stmt SEMI
Rule 25    semi_stmt_list -> SEMI simple_stmt stmt_list
Rule 26    simple_stmt -> expression
Rule 27    expression -> implicit_string_push
Rule 28    expression -> bin_bool_func
Rule 29    expression -> unary_bool_func
Rule 30    expression -> func_compose
Rule 31    expression -> implicit_number_push
Rule 32    expression -> push_func
Rule 33    expression -> push_plus
Rule 34    expression -> empty_expression
Rule 35    implicit_number_push -> NUMBER expression
Rule 36    push_func -> DOLLARSIGN NAME expression
Rule 37    push_plus -> DOLLARSIGN PLUS expression
Rule 38    implicit_string_push -> STRING expression
Rule 39    bin_bool_func -> BIN_BOOL_FUNC expression
Rule 40    unary_bool_func -> UNARY_BOOL_FUNC expression
Rule 41    func_compose -> NAME expression
Rule 42    empty_expression -> empty
Rule 43    empty -> <empty>

Terminals, with rules where they appear

AMPER                : 
AMPEREQUAL           : 
ASYNC                : 
AT                   : 
ATEQUAL              : 
AWAIT                : 
BIN_BOOL_FUNC        : 39
CIRCUMFLEX           : 
CIRCUMFLEXEQUAL      : 
COLON                : 13
COMMA                : 
COMMENT              : 
DEDENT               : 18
DEF                  : 13
DOLLARSIGN           : 36 37
DOT                  : 
DOUBLESLASH          : 
DOUBLESLASHEQUAL     : 
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
ELLIPSIS             : 
ENCODING             : 9
ENDMARKER            : 7
EQEQUAL              : 
EQUAL                : 
ERRORTOKEN           : 
GREATER              : 
GREATEREQUAL         : 
INDENT               : 18
LBRACE               : 
LEFTSHIFT            : 
LEFTSHIFTEQUAL       : 
LESS                 : 
LESSEQUAL            : 
LPAR                 : 
LSQB                 : 
MINEQUAL             : 
MINUS                : 
NAME                 : 14 36 41
NEWLINE              : 6 17 18
NL                   : 
NOTEQUAL             : 
NT_OFFSET            : 
NUMBER               : 35
OP                   : 
PERCENT              : 
PERCENTEQUAL         : 
PLUS                 : 37
PLUSEQUAL            : 
RARROW               : 
RBRACE               : 
RIGHTSHIFT           : 
RIGHTSHIFTEQUAL      : 
RPAR                 : 
RSQB                 : 
SEMI                 : 24 25
SLASH                : 
SLASHEQUAL           : 
STAR                 : 
STAREQUAL            : 
STRING               : 38
TILDE                : 
UNARY_BOOL_FUNC      : 40
VBAR                 : 
VBAREQUAL            : 
error                : 

Nonterminals, with rules where they appear

bin_bool_func        : 28
compound_stmt        : 11
empty                : 5 42
empty_expression     : 34
empty_module         : 4
expression           : 26 35 36 37 38 39 40 41
func_compose         : 30
funcdef              : 12
funcname             : 13
implicit_number_push : 31
implicit_string_push : 27
indented_block       : 16
module               : 6 7 8 9 0
module_encoding      : 1
module_newline       : 3
module_statement     : 2
push_func            : 32
push_plus            : 33
semi_stmt_list       : 23
simple_stmt          : 22 24 25
statement            : 7 8 20 21
statement_plus       : 18 21
statement_statement_plus : 19
stmt_list            : 17 25
suite                : 13
terminated_stmt_list : 10 15
unary_bool_func      : 29

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . module_encoding
    (2) module -> . module_statement
    (3) module -> . module_newline
    (4) module -> . empty_module
    (9) module_encoding -> . ENCODING module
    (7) module_statement -> . statement module ENDMARKER
    (8) module_statement -> . statement module
    (6) module_newline -> . NEWLINE module
    (5) empty_module -> . empty
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (43) empty -> .
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    ENCODING        shift and go to state 18
    NEWLINE         shift and go to state 20
    $end            reduce using rule 43 (empty -> .)
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16

  ! SEMI            [ reduce using rule 43 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty_module                   shift and go to state 3
    empty_expression               shift and go to state 9
    terminated_stmt_list           shift and go to state 19
    module                         shift and go to state 11
    func_compose                   shift and go to state 12
    module_statement               shift and go to state 13
    compound_stmt                  shift and go to state 14
    implicit_string_push           shift and go to state 17
    module_encoding                shift and go to state 21
    implicit_number_push           shift and go to state 22
    module_newline                 shift and go to state 23
    statement                      shift and go to state 26
    empty                          shift and go to state 10
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    expression                     shift and go to state 32

state 1

    (22) stmt_list -> simple_stmt .
    (24) stmt_list -> simple_stmt . SEMI

    NEWLINE         reduce using rule 22 (stmt_list -> simple_stmt .)
    SEMI            shift and go to state 33


state 2

    (28) expression -> bin_bool_func .

    SEMI            reduce using rule 28 (expression -> bin_bool_func .)
    NEWLINE         reduce using rule 28 (expression -> bin_bool_func .)
    STRING          reduce using rule 28 (expression -> bin_bool_func .)
    BIN_BOOL_FUNC   reduce using rule 28 (expression -> bin_bool_func .)
    UNARY_BOOL_FUNC reduce using rule 28 (expression -> bin_bool_func .)
    NAME            reduce using rule 28 (expression -> bin_bool_func .)
    NUMBER          reduce using rule 28 (expression -> bin_bool_func .)
    DOLLARSIGN      reduce using rule 28 (expression -> bin_bool_func .)


state 3

    (4) module -> empty_module .

    $end            reduce using rule 4 (module -> empty_module .)
    ENDMARKER       reduce using rule 4 (module -> empty_module .)


state 4

    (12) compound_stmt -> funcdef .

    ENCODING        reduce using rule 12 (compound_stmt -> funcdef .)
    NEWLINE         reduce using rule 12 (compound_stmt -> funcdef .)
    DEF             reduce using rule 12 (compound_stmt -> funcdef .)
    SEMI            reduce using rule 12 (compound_stmt -> funcdef .)
    STRING          reduce using rule 12 (compound_stmt -> funcdef .)
    BIN_BOOL_FUNC   reduce using rule 12 (compound_stmt -> funcdef .)
    UNARY_BOOL_FUNC reduce using rule 12 (compound_stmt -> funcdef .)
    NAME            reduce using rule 12 (compound_stmt -> funcdef .)
    NUMBER          reduce using rule 12 (compound_stmt -> funcdef .)
    DOLLARSIGN      reduce using rule 12 (compound_stmt -> funcdef .)
    ENDMARKER       reduce using rule 12 (compound_stmt -> funcdef .)
    $end            reduce using rule 12 (compound_stmt -> funcdef .)
    DEDENT          reduce using rule 12 (compound_stmt -> funcdef .)


state 5

    (38) implicit_string_push -> STRING . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 35

state 6

    (29) expression -> unary_bool_func .

    SEMI            reduce using rule 29 (expression -> unary_bool_func .)
    NEWLINE         reduce using rule 29 (expression -> unary_bool_func .)
    STRING          reduce using rule 29 (expression -> unary_bool_func .)
    BIN_BOOL_FUNC   reduce using rule 29 (expression -> unary_bool_func .)
    UNARY_BOOL_FUNC reduce using rule 29 (expression -> unary_bool_func .)
    NAME            reduce using rule 29 (expression -> unary_bool_func .)
    NUMBER          reduce using rule 29 (expression -> unary_bool_func .)
    DOLLARSIGN      reduce using rule 29 (expression -> unary_bool_func .)


state 7

    (40) unary_bool_func -> UNARY_BOOL_FUNC . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 36

state 8

    (32) expression -> push_func .

    SEMI            reduce using rule 32 (expression -> push_func .)
    NEWLINE         reduce using rule 32 (expression -> push_func .)
    STRING          reduce using rule 32 (expression -> push_func .)
    BIN_BOOL_FUNC   reduce using rule 32 (expression -> push_func .)
    UNARY_BOOL_FUNC reduce using rule 32 (expression -> push_func .)
    NAME            reduce using rule 32 (expression -> push_func .)
    NUMBER          reduce using rule 32 (expression -> push_func .)
    DOLLARSIGN      reduce using rule 32 (expression -> push_func .)


state 9

    (34) expression -> empty_expression .

    SEMI            reduce using rule 34 (expression -> empty_expression .)
    NEWLINE         reduce using rule 34 (expression -> empty_expression .)
    STRING          reduce using rule 34 (expression -> empty_expression .)
    BIN_BOOL_FUNC   reduce using rule 34 (expression -> empty_expression .)
    UNARY_BOOL_FUNC reduce using rule 34 (expression -> empty_expression .)
    NAME            reduce using rule 34 (expression -> empty_expression .)
    NUMBER          reduce using rule 34 (expression -> empty_expression .)
    DOLLARSIGN      reduce using rule 34 (expression -> empty_expression .)


state 10

    (5) empty_module -> empty .
    (42) empty_expression -> empty .

    $end            reduce using rule 5 (empty_module -> empty .)
    ENDMARKER       reduce using rule 5 (empty_module -> empty .)
    SEMI            reduce using rule 42 (empty_expression -> empty .)
    NEWLINE         reduce using rule 42 (empty_expression -> empty .)


state 11

    (0) S' -> module .



state 12

    (30) expression -> func_compose .

    SEMI            reduce using rule 30 (expression -> func_compose .)
    NEWLINE         reduce using rule 30 (expression -> func_compose .)
    STRING          reduce using rule 30 (expression -> func_compose .)
    BIN_BOOL_FUNC   reduce using rule 30 (expression -> func_compose .)
    UNARY_BOOL_FUNC reduce using rule 30 (expression -> func_compose .)
    NAME            reduce using rule 30 (expression -> func_compose .)
    NUMBER          reduce using rule 30 (expression -> func_compose .)
    DOLLARSIGN      reduce using rule 30 (expression -> func_compose .)


state 13

    (2) module -> module_statement .

    $end            reduce using rule 2 (module -> module_statement .)
    ENDMARKER       reduce using rule 2 (module -> module_statement .)


state 14

    (11) statement -> compound_stmt .

    DEF             reduce using rule 11 (statement -> compound_stmt .)
    SEMI            reduce using rule 11 (statement -> compound_stmt .)
    STRING          reduce using rule 11 (statement -> compound_stmt .)
    BIN_BOOL_FUNC   reduce using rule 11 (statement -> compound_stmt .)
    UNARY_BOOL_FUNC reduce using rule 11 (statement -> compound_stmt .)
    NAME            reduce using rule 11 (statement -> compound_stmt .)
    NUMBER          reduce using rule 11 (statement -> compound_stmt .)
    DOLLARSIGN      reduce using rule 11 (statement -> compound_stmt .)
    NEWLINE         reduce using rule 11 (statement -> compound_stmt .)
    DEDENT          reduce using rule 11 (statement -> compound_stmt .)
    ENCODING        reduce using rule 11 (statement -> compound_stmt .)
    ENDMARKER       reduce using rule 11 (statement -> compound_stmt .)
    $end            reduce using rule 11 (statement -> compound_stmt .)


state 15

    (41) func_compose -> NAME . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 37

state 16

    (36) push_func -> DOLLARSIGN . NAME expression
    (37) push_plus -> DOLLARSIGN . PLUS expression

    NAME            shift and go to state 39
    PLUS            shift and go to state 38


state 17

    (27) expression -> implicit_string_push .

    SEMI            reduce using rule 27 (expression -> implicit_string_push .)
    NEWLINE         reduce using rule 27 (expression -> implicit_string_push .)
    STRING          reduce using rule 27 (expression -> implicit_string_push .)
    BIN_BOOL_FUNC   reduce using rule 27 (expression -> implicit_string_push .)
    UNARY_BOOL_FUNC reduce using rule 27 (expression -> implicit_string_push .)
    NAME            reduce using rule 27 (expression -> implicit_string_push .)
    NUMBER          reduce using rule 27 (expression -> implicit_string_push .)
    DOLLARSIGN      reduce using rule 27 (expression -> implicit_string_push .)


state 18

    (9) module_encoding -> ENCODING . module
    (1) module -> . module_encoding
    (2) module -> . module_statement
    (3) module -> . module_newline
    (4) module -> . empty_module
    (9) module_encoding -> . ENCODING module
    (7) module_statement -> . statement module ENDMARKER
    (8) module_statement -> . statement module
    (6) module_newline -> . NEWLINE module
    (5) empty_module -> . empty
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (43) empty -> .
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    ENCODING        shift and go to state 18
    NEWLINE         shift and go to state 20
    $end            reduce using rule 43 (empty -> .)
    ENDMARKER       reduce using rule 43 (empty -> .)
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16

  ! SEMI            [ reduce using rule 43 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty_module                   shift and go to state 3
    empty_expression               shift and go to state 9
    terminated_stmt_list           shift and go to state 19
    module                         shift and go to state 40
    func_compose                   shift and go to state 12
    module_statement               shift and go to state 13
    compound_stmt                  shift and go to state 14
    implicit_string_push           shift and go to state 17
    module_encoding                shift and go to state 21
    implicit_number_push           shift and go to state 22
    module_newline                 shift and go to state 23
    statement                      shift and go to state 26
    empty                          shift and go to state 10
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    expression                     shift and go to state 32

state 19

    (10) statement -> terminated_stmt_list .

    DEF             reduce using rule 10 (statement -> terminated_stmt_list .)
    SEMI            reduce using rule 10 (statement -> terminated_stmt_list .)
    STRING          reduce using rule 10 (statement -> terminated_stmt_list .)
    BIN_BOOL_FUNC   reduce using rule 10 (statement -> terminated_stmt_list .)
    UNARY_BOOL_FUNC reduce using rule 10 (statement -> terminated_stmt_list .)
    NAME            reduce using rule 10 (statement -> terminated_stmt_list .)
    NUMBER          reduce using rule 10 (statement -> terminated_stmt_list .)
    DOLLARSIGN      reduce using rule 10 (statement -> terminated_stmt_list .)
    NEWLINE         reduce using rule 10 (statement -> terminated_stmt_list .)
    DEDENT          reduce using rule 10 (statement -> terminated_stmt_list .)
    ENCODING        reduce using rule 10 (statement -> terminated_stmt_list .)
    ENDMARKER       reduce using rule 10 (statement -> terminated_stmt_list .)
    $end            reduce using rule 10 (statement -> terminated_stmt_list .)


state 20

    (6) module_newline -> NEWLINE . module
    (1) module -> . module_encoding
    (2) module -> . module_statement
    (3) module -> . module_newline
    (4) module -> . empty_module
    (9) module_encoding -> . ENCODING module
    (7) module_statement -> . statement module ENDMARKER
    (8) module_statement -> . statement module
    (6) module_newline -> . NEWLINE module
    (5) empty_module -> . empty
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (43) empty -> .
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    ENCODING        shift and go to state 18
    NEWLINE         shift and go to state 20
    $end            reduce using rule 43 (empty -> .)
    ENDMARKER       reduce using rule 43 (empty -> .)
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16

  ! SEMI            [ reduce using rule 43 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty_module                   shift and go to state 3
    empty_expression               shift and go to state 9
    terminated_stmt_list           shift and go to state 19
    module                         shift and go to state 41
    func_compose                   shift and go to state 12
    module_statement               shift and go to state 13
    compound_stmt                  shift and go to state 14
    implicit_string_push           shift and go to state 17
    module_encoding                shift and go to state 21
    implicit_number_push           shift and go to state 22
    module_newline                 shift and go to state 23
    statement                      shift and go to state 26
    empty                          shift and go to state 10
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    expression                     shift and go to state 32

state 21

    (1) module -> module_encoding .

    $end            reduce using rule 1 (module -> module_encoding .)
    ENDMARKER       reduce using rule 1 (module -> module_encoding .)


state 22

    (31) expression -> implicit_number_push .

    SEMI            reduce using rule 31 (expression -> implicit_number_push .)
    NEWLINE         reduce using rule 31 (expression -> implicit_number_push .)
    STRING          reduce using rule 31 (expression -> implicit_number_push .)
    BIN_BOOL_FUNC   reduce using rule 31 (expression -> implicit_number_push .)
    UNARY_BOOL_FUNC reduce using rule 31 (expression -> implicit_number_push .)
    NAME            reduce using rule 31 (expression -> implicit_number_push .)
    NUMBER          reduce using rule 31 (expression -> implicit_number_push .)
    DOLLARSIGN      reduce using rule 31 (expression -> implicit_number_push .)


state 23

    (3) module -> module_newline .

    $end            reduce using rule 3 (module -> module_newline .)
    ENDMARKER       reduce using rule 3 (module -> module_newline .)


state 24

    (25) semi_stmt_list -> SEMI . simple_stmt stmt_list
    (26) simple_stmt -> . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 42
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    empty_expression               shift and go to state 9
    func_compose                   shift and go to state 12
    push_plus                      shift and go to state 28
    implicit_string_push           shift and go to state 17
    expression                     shift and go to state 32

state 25

    (35) implicit_number_push -> NUMBER . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 43

state 26

    (7) module_statement -> statement . module ENDMARKER
    (8) module_statement -> statement . module
    (1) module -> . module_encoding
    (2) module -> . module_statement
    (3) module -> . module_newline
    (4) module -> . empty_module
    (9) module_encoding -> . ENCODING module
    (7) module_statement -> . statement module ENDMARKER
    (8) module_statement -> . statement module
    (6) module_newline -> . NEWLINE module
    (5) empty_module -> . empty
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (43) empty -> .
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMI resolved as shift
    ENCODING        shift and go to state 18
    NEWLINE         shift and go to state 20
    $end            reduce using rule 43 (empty -> .)
    ENDMARKER       reduce using rule 43 (empty -> .)
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16

  ! SEMI            [ reduce using rule 43 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty_module                   shift and go to state 3
    empty_expression               shift and go to state 9
    terminated_stmt_list           shift and go to state 19
    module                         shift and go to state 44
    func_compose                   shift and go to state 12
    module_statement               shift and go to state 13
    compound_stmt                  shift and go to state 14
    implicit_string_push           shift and go to state 17
    module_encoding                shift and go to state 21
    implicit_number_push           shift and go to state 22
    module_newline                 shift and go to state 23
    statement                      shift and go to state 26
    empty                          shift and go to state 10
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    expression                     shift and go to state 32

state 27

    (17) terminated_stmt_list -> stmt_list . NEWLINE

    NEWLINE         shift and go to state 45


state 28

    (33) expression -> push_plus .

    SEMI            reduce using rule 33 (expression -> push_plus .)
    NEWLINE         reduce using rule 33 (expression -> push_plus .)
    STRING          reduce using rule 33 (expression -> push_plus .)
    BIN_BOOL_FUNC   reduce using rule 33 (expression -> push_plus .)
    UNARY_BOOL_FUNC reduce using rule 33 (expression -> push_plus .)
    NAME            reduce using rule 33 (expression -> push_plus .)
    NUMBER          reduce using rule 33 (expression -> push_plus .)
    DOLLARSIGN      reduce using rule 33 (expression -> push_plus .)


state 29

    (23) stmt_list -> semi_stmt_list .

    NEWLINE         reduce using rule 23 (stmt_list -> semi_stmt_list .)


state 30

    (13) funcdef -> DEF . funcname COLON suite
    (14) funcname -> . NAME

    NAME            shift and go to state 47

    funcname                       shift and go to state 46

state 31

    (39) bin_bool_func -> BIN_BOOL_FUNC . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 48

state 32

    (26) simple_stmt -> expression .

    SEMI            reduce using rule 26 (simple_stmt -> expression .)
    NEWLINE         reduce using rule 26 (simple_stmt -> expression .)
    STRING          reduce using rule 26 (simple_stmt -> expression .)
    BIN_BOOL_FUNC   reduce using rule 26 (simple_stmt -> expression .)
    UNARY_BOOL_FUNC reduce using rule 26 (simple_stmt -> expression .)
    NAME            reduce using rule 26 (simple_stmt -> expression .)
    NUMBER          reduce using rule 26 (simple_stmt -> expression .)
    DOLLARSIGN      reduce using rule 26 (simple_stmt -> expression .)


state 33

    (24) stmt_list -> simple_stmt SEMI .

    NEWLINE         reduce using rule 24 (stmt_list -> simple_stmt SEMI .)


state 34

    (42) empty_expression -> empty .

    SEMI            reduce using rule 42 (empty_expression -> empty .)
    NEWLINE         reduce using rule 42 (empty_expression -> empty .)
    STRING          reduce using rule 42 (empty_expression -> empty .)
    BIN_BOOL_FUNC   reduce using rule 42 (empty_expression -> empty .)
    UNARY_BOOL_FUNC reduce using rule 42 (empty_expression -> empty .)
    NAME            reduce using rule 42 (empty_expression -> empty .)
    NUMBER          reduce using rule 42 (empty_expression -> empty .)
    DOLLARSIGN      reduce using rule 42 (empty_expression -> empty .)


state 35

    (38) implicit_string_push -> STRING expression .

    SEMI            reduce using rule 38 (implicit_string_push -> STRING expression .)
    NEWLINE         reduce using rule 38 (implicit_string_push -> STRING expression .)
    STRING          reduce using rule 38 (implicit_string_push -> STRING expression .)
    BIN_BOOL_FUNC   reduce using rule 38 (implicit_string_push -> STRING expression .)
    UNARY_BOOL_FUNC reduce using rule 38 (implicit_string_push -> STRING expression .)
    NAME            reduce using rule 38 (implicit_string_push -> STRING expression .)
    NUMBER          reduce using rule 38 (implicit_string_push -> STRING expression .)
    DOLLARSIGN      reduce using rule 38 (implicit_string_push -> STRING expression .)


state 36

    (40) unary_bool_func -> UNARY_BOOL_FUNC expression .

    SEMI            reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    NEWLINE         reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    STRING          reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    BIN_BOOL_FUNC   reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    UNARY_BOOL_FUNC reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    NAME            reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    NUMBER          reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)
    DOLLARSIGN      reduce using rule 40 (unary_bool_func -> UNARY_BOOL_FUNC expression .)


state 37

    (41) func_compose -> NAME expression .

    SEMI            reduce using rule 41 (func_compose -> NAME expression .)
    NEWLINE         reduce using rule 41 (func_compose -> NAME expression .)
    STRING          reduce using rule 41 (func_compose -> NAME expression .)
    BIN_BOOL_FUNC   reduce using rule 41 (func_compose -> NAME expression .)
    UNARY_BOOL_FUNC reduce using rule 41 (func_compose -> NAME expression .)
    NAME            reduce using rule 41 (func_compose -> NAME expression .)
    NUMBER          reduce using rule 41 (func_compose -> NAME expression .)
    DOLLARSIGN      reduce using rule 41 (func_compose -> NAME expression .)


state 38

    (37) push_plus -> DOLLARSIGN PLUS . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 49

state 39

    (36) push_func -> DOLLARSIGN NAME . expression
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BIN_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for UNARY_BOOL_FUNC resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    SEMI            reduce using rule 43 (empty -> .)
    NEWLINE         reduce using rule 43 (empty -> .)

  ! STRING          [ reduce using rule 43 (empty -> .) ]
  ! BIN_BOOL_FUNC   [ reduce using rule 43 (empty -> .) ]
  ! UNARY_BOOL_FUNC [ reduce using rule 43 (empty -> .) ]
  ! NAME            [ reduce using rule 43 (empty -> .) ]
  ! NUMBER          [ reduce using rule 43 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 43 (empty -> .) ]

    func_compose                   shift and go to state 12
    empty_expression               shift and go to state 9
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    implicit_string_push           shift and go to state 17
    unary_bool_func                shift and go to state 6
    push_plus                      shift and go to state 28
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    expression                     shift and go to state 50

state 40

    (9) module_encoding -> ENCODING module .

    $end            reduce using rule 9 (module_encoding -> ENCODING module .)
    ENDMARKER       reduce using rule 9 (module_encoding -> ENCODING module .)


state 41

    (6) module_newline -> NEWLINE module .

    $end            reduce using rule 6 (module_newline -> NEWLINE module .)
    ENDMARKER       reduce using rule 6 (module_newline -> NEWLINE module .)


state 42

    (25) semi_stmt_list -> SEMI simple_stmt . stmt_list
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    NEWLINE         reduce using rule 43 (empty -> .)

  ! SEMI            [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    empty_expression               shift and go to state 9
    func_compose                   shift and go to state 12
    stmt_list                      shift and go to state 51
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    implicit_string_push           shift and go to state 17
    expression                     shift and go to state 32

state 43

    (35) implicit_number_push -> NUMBER expression .

    SEMI            reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    NEWLINE         reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    STRING          reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    BIN_BOOL_FUNC   reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    UNARY_BOOL_FUNC reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    NAME            reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    NUMBER          reduce using rule 35 (implicit_number_push -> NUMBER expression .)
    DOLLARSIGN      reduce using rule 35 (implicit_number_push -> NUMBER expression .)


state 44

    (7) module_statement -> statement module . ENDMARKER
    (8) module_statement -> statement module .

  ! shift/reduce conflict for ENDMARKER resolved as shift
    ENDMARKER       shift and go to state 52
    $end            reduce using rule 8 (module_statement -> statement module .)

  ! ENDMARKER       [ reduce using rule 8 (module_statement -> statement module .) ]


state 45

    (17) terminated_stmt_list -> stmt_list NEWLINE .

    ENCODING        reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    NEWLINE         reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    DEF             reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    SEMI            reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    STRING          reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    BIN_BOOL_FUNC   reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    UNARY_BOOL_FUNC reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    NAME            reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    NUMBER          reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    DOLLARSIGN      reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    ENDMARKER       reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    $end            reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)
    DEDENT          reduce using rule 17 (terminated_stmt_list -> stmt_list NEWLINE .)


state 46

    (13) funcdef -> DEF funcname . COLON suite

    COLON           shift and go to state 53


state 47

    (14) funcname -> NAME .

    COLON           reduce using rule 14 (funcname -> NAME .)


state 48

    (39) bin_bool_func -> BIN_BOOL_FUNC expression .

    SEMI            reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    NEWLINE         reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    STRING          reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    BIN_BOOL_FUNC   reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    UNARY_BOOL_FUNC reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    NAME            reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    NUMBER          reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)
    DOLLARSIGN      reduce using rule 39 (bin_bool_func -> BIN_BOOL_FUNC expression .)


state 49

    (37) push_plus -> DOLLARSIGN PLUS expression .

    SEMI            reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    NEWLINE         reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    STRING          reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    BIN_BOOL_FUNC   reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    UNARY_BOOL_FUNC reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    NAME            reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    NUMBER          reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)
    DOLLARSIGN      reduce using rule 37 (push_plus -> DOLLARSIGN PLUS expression .)


state 50

    (36) push_func -> DOLLARSIGN NAME expression .

    SEMI            reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    NEWLINE         reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    STRING          reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    BIN_BOOL_FUNC   reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    UNARY_BOOL_FUNC reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    NAME            reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    NUMBER          reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)
    DOLLARSIGN      reduce using rule 36 (push_func -> DOLLARSIGN NAME expression .)


state 51

    (25) semi_stmt_list -> SEMI simple_stmt stmt_list .

    NEWLINE         reduce using rule 25 (semi_stmt_list -> SEMI simple_stmt stmt_list .)


state 52

    (7) module_statement -> statement module ENDMARKER .

    $end            reduce using rule 7 (module_statement -> statement module ENDMARKER .)
    ENDMARKER       reduce using rule 7 (module_statement -> statement module ENDMARKER .)


state 53

    (13) funcdef -> DEF funcname COLON . suite
    (15) suite -> . terminated_stmt_list
    (16) suite -> . indented_block
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (18) indented_block -> . NEWLINE INDENT statement_plus DEDENT
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 55
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16

  ! SEMI            [ reduce using rule 43 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    implicit_number_push           shift and go to state 22
    unary_bool_func                shift and go to state 6
    push_func                      shift and go to state 8
    terminated_stmt_list           shift and go to state 54
    empty_expression               shift and go to state 9
    empty                          shift and go to state 34
    func_compose                   shift and go to state 12
    stmt_list                      shift and go to state 27
    indented_block                 shift and go to state 56
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    implicit_string_push           shift and go to state 17
    suite                          shift and go to state 57
    expression                     shift and go to state 32

state 54

    (15) suite -> terminated_stmt_list .

    ENCODING        reduce using rule 15 (suite -> terminated_stmt_list .)
    NEWLINE         reduce using rule 15 (suite -> terminated_stmt_list .)
    DEF             reduce using rule 15 (suite -> terminated_stmt_list .)
    SEMI            reduce using rule 15 (suite -> terminated_stmt_list .)
    STRING          reduce using rule 15 (suite -> terminated_stmt_list .)
    BIN_BOOL_FUNC   reduce using rule 15 (suite -> terminated_stmt_list .)
    UNARY_BOOL_FUNC reduce using rule 15 (suite -> terminated_stmt_list .)
    NAME            reduce using rule 15 (suite -> terminated_stmt_list .)
    NUMBER          reduce using rule 15 (suite -> terminated_stmt_list .)
    DOLLARSIGN      reduce using rule 15 (suite -> terminated_stmt_list .)
    ENDMARKER       reduce using rule 15 (suite -> terminated_stmt_list .)
    $end            reduce using rule 15 (suite -> terminated_stmt_list .)
    DEDENT          reduce using rule 15 (suite -> terminated_stmt_list .)


state 55

    (18) indented_block -> NEWLINE . INDENT statement_plus DEDENT

    INDENT          shift and go to state 58


state 56

    (16) suite -> indented_block .

    ENCODING        reduce using rule 16 (suite -> indented_block .)
    NEWLINE         reduce using rule 16 (suite -> indented_block .)
    DEF             reduce using rule 16 (suite -> indented_block .)
    SEMI            reduce using rule 16 (suite -> indented_block .)
    STRING          reduce using rule 16 (suite -> indented_block .)
    BIN_BOOL_FUNC   reduce using rule 16 (suite -> indented_block .)
    UNARY_BOOL_FUNC reduce using rule 16 (suite -> indented_block .)
    NAME            reduce using rule 16 (suite -> indented_block .)
    NUMBER          reduce using rule 16 (suite -> indented_block .)
    DOLLARSIGN      reduce using rule 16 (suite -> indented_block .)
    ENDMARKER       reduce using rule 16 (suite -> indented_block .)
    $end            reduce using rule 16 (suite -> indented_block .)
    DEDENT          reduce using rule 16 (suite -> indented_block .)


state 57

    (13) funcdef -> DEF funcname COLON suite .

    DEF             reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    SEMI            reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    STRING          reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    BIN_BOOL_FUNC   reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    UNARY_BOOL_FUNC reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    NAME            reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    NUMBER          reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    DOLLARSIGN      reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    NEWLINE         reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    DEDENT          reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    ENCODING        reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    ENDMARKER       reduce using rule 13 (funcdef -> DEF funcname COLON suite .)
    $end            reduce using rule 13 (funcdef -> DEF funcname COLON suite .)


state 58

    (18) indented_block -> NEWLINE INDENT . statement_plus DEDENT
    (19) statement_plus -> . statement_statement_plus
    (20) statement_plus -> . statement
    (21) statement_statement_plus -> . statement statement_plus
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    NEWLINE         reduce using rule 43 (empty -> .)

  ! SEMI            [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    empty_expression               shift and go to state 9
    implicit_number_push           shift and go to state 22
    statement_plus                 shift and go to state 59
    unary_bool_func                shift and go to state 6
    statement_statement_plus       shift and go to state 60
    terminated_stmt_list           shift and go to state 19
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    statement                      shift and go to state 61
    func_compose                   shift and go to state 12
    compound_stmt                  shift and go to state 14
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    implicit_string_push           shift and go to state 17
    expression                     shift and go to state 32

state 59

    (18) indented_block -> NEWLINE INDENT statement_plus . DEDENT

    DEDENT          shift and go to state 62


state 60

    (19) statement_plus -> statement_statement_plus .

    DEDENT          reduce using rule 19 (statement_plus -> statement_statement_plus .)


state 61

    (20) statement_plus -> statement .
    (21) statement_statement_plus -> statement . statement_plus
    (19) statement_plus -> . statement_statement_plus
    (20) statement_plus -> . statement
    (21) statement_statement_plus -> . statement statement_plus
    (10) statement -> . terminated_stmt_list
    (11) statement -> . compound_stmt
    (17) terminated_stmt_list -> . stmt_list NEWLINE
    (12) compound_stmt -> . funcdef
    (22) stmt_list -> . simple_stmt
    (23) stmt_list -> . semi_stmt_list
    (24) stmt_list -> . simple_stmt SEMI
    (13) funcdef -> . DEF funcname COLON suite
    (26) simple_stmt -> . expression
    (25) semi_stmt_list -> . SEMI simple_stmt stmt_list
    (27) expression -> . implicit_string_push
    (28) expression -> . bin_bool_func
    (29) expression -> . unary_bool_func
    (30) expression -> . func_compose
    (31) expression -> . implicit_number_push
    (32) expression -> . push_func
    (33) expression -> . push_plus
    (34) expression -> . empty_expression
    (38) implicit_string_push -> . STRING expression
    (39) bin_bool_func -> . BIN_BOOL_FUNC expression
    (40) unary_bool_func -> . UNARY_BOOL_FUNC expression
    (41) func_compose -> . NAME expression
    (35) implicit_number_push -> . NUMBER expression
    (36) push_func -> . DOLLARSIGN NAME expression
    (37) push_plus -> . DOLLARSIGN PLUS expression
    (42) empty_expression -> . empty
    (43) empty -> .

  ! shift/reduce conflict for SEMI resolved as shift
    DEDENT          reduce using rule 20 (statement_plus -> statement .)
    DEF             shift and go to state 30
    SEMI            shift and go to state 24
    STRING          shift and go to state 5
    BIN_BOOL_FUNC   shift and go to state 31
    UNARY_BOOL_FUNC shift and go to state 7
    NAME            shift and go to state 15
    NUMBER          shift and go to state 25
    DOLLARSIGN      shift and go to state 16
    NEWLINE         reduce using rule 43 (empty -> .)

  ! SEMI            [ reduce using rule 43 (empty -> .) ]

    simple_stmt                    shift and go to state 1
    bin_bool_func                  shift and go to state 2
    funcdef                        shift and go to state 4
    empty_expression               shift and go to state 9
    implicit_number_push           shift and go to state 22
    statement_plus                 shift and go to state 63
    unary_bool_func                shift and go to state 6
    statement_statement_plus       shift and go to state 60
    terminated_stmt_list           shift and go to state 19
    push_func                      shift and go to state 8
    empty                          shift and go to state 34
    statement                      shift and go to state 61
    func_compose                   shift and go to state 12
    compound_stmt                  shift and go to state 14
    stmt_list                      shift and go to state 27
    push_plus                      shift and go to state 28
    semi_stmt_list                 shift and go to state 29
    implicit_string_push           shift and go to state 17
    expression                     shift and go to state 32

state 62

    (18) indented_block -> NEWLINE INDENT statement_plus DEDENT .

    ENCODING        reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    NEWLINE         reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    DEF             reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    SEMI            reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    STRING          reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    BIN_BOOL_FUNC   reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    UNARY_BOOL_FUNC reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    NAME            reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    NUMBER          reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    DOLLARSIGN      reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    ENDMARKER       reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    $end            reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)
    DEDENT          reduce using rule 18 (indented_block -> NEWLINE INDENT statement_plus DEDENT .)


state 63

    (21) statement_statement_plus -> statement statement_plus .

    DEDENT          reduce using rule 21 (statement_statement_plus -> statement statement_plus .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 0 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 5 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 5 resolved as shift
WARNING: shift/reduce conflict for NAME in state 5 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 5 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 7 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 7 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 7 resolved as shift
WARNING: shift/reduce conflict for NAME in state 7 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 7 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING in state 15 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 15 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 15 resolved as shift
WARNING: shift/reduce conflict for NAME in state 15 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 15 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 15 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 18 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 18 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 20 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 20 resolved as shift
WARNING: shift/reduce conflict for STRING in state 24 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 24 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 24 resolved as shift
WARNING: shift/reduce conflict for NAME in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 24 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 24 resolved as shift
WARNING: shift/reduce conflict for STRING in state 25 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 25 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 25 resolved as shift
WARNING: shift/reduce conflict for NAME in state 25 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 25 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 25 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 26 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 26 resolved as shift
WARNING: shift/reduce conflict for STRING in state 31 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 31 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 31 resolved as shift
WARNING: shift/reduce conflict for NAME in state 31 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 31 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 31 resolved as shift
WARNING: shift/reduce conflict for STRING in state 38 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 38 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 38 resolved as shift
WARNING: shift/reduce conflict for NAME in state 38 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 38 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 38 resolved as shift
WARNING: shift/reduce conflict for STRING in state 39 resolved as shift
WARNING: shift/reduce conflict for BIN_BOOL_FUNC in state 39 resolved as shift
WARNING: shift/reduce conflict for UNARY_BOOL_FUNC in state 39 resolved as shift
WARNING: shift/reduce conflict for NAME in state 39 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 39 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 39 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 42 resolved as shift
WARNING: shift/reduce conflict for ENDMARKER in state 44 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 53 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 53 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 61 resolved as shift

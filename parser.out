Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    DOUBLESTAREQUAL
    PERCENTEQUAL
    RARROW
    GREATEREQUAL
    GREATER
    RIGHTSHIFTEQUAL
    STAR
    RPAR
    LEFTSHIFTEQUAL
    TILDE
    LPAR
    SLASH
    LEFTSHIFT
    STAREQUAL
    COMMENT
    VBAR
    LESSEQUAL
    CIRCUMFLEX
    RSQB
    RBRACE
    DOUBLESTAR
    NOTEQUAL
    DOUBLESLASH
    DOT
    NL
    AMPER
    ELLIPSIS
    LESS
    PERCENT
    EQEQUAL
    LSQB
    PLUSEQUAL
    SEMI
    ERRORTOKEN
    ATEQUAL
    CIRCUMFLEXEQUAL
    AT
    DOUBLESLASHEQUAL
    OP
    NT_OFFSET
    SLASHEQUAL
    ASYNC
    VBAREQUAL
    MINUS
    LBRACE
    AWAIT
    COMMA
    EQUAL
    MINEQUAL
    AMPEREQUAL
    RIGHTSHIFT

Grammar

Rule 0     S' -> module
Rule 1     module -> ENCODING module
Rule 2     module -> statement module ENDMARKER
Rule 3     module -> statement module
Rule 4     module -> NEWLINE module
Rule 5     module -> empty
Rule 6     statement -> stmt_list NEWLINE
Rule 7     statement -> compound_stmt
Rule 8     compound_stmt -> funcdef
Rule 9     funcdef -> NAME funcname COLON suite
Rule 10    funcname -> NAME
Rule 11    suite -> stmt_list NEWLINE
Rule 12    suite -> NEWLINE INDENT statement_plus DEDENT
Rule 13    statement_plus -> statement statement_plus
Rule 14    statement_plus -> statement
Rule 15    stmt_list -> simple_stmt
Rule 16    stmt_list -> ; simple_stmt stmt_list
Rule 17    stmt_list -> simple_stmt ;
Rule 18    simple_stmt -> expression
Rule 19    expression -> STRING expression
Rule 20    expression -> NAME expression
Rule 21    expression -> NUMBER expression
Rule 22    expression -> DOLLARSIGN NAME expression
Rule 23    expression -> DOLLARSIGN PLUS expression
Rule 24    expression -> empty
Rule 25    empty -> <empty>

Terminals, with rules where they appear

;                    : 16 17
AMPER                : 
AMPEREQUAL           : 
ASYNC                : 
AT                   : 
ATEQUAL              : 
AWAIT                : 
CIRCUMFLEX           : 
CIRCUMFLEXEQUAL      : 
COLON                : 9
COMMA                : 
COMMENT              : 
DEDENT               : 12
DOLLARSIGN           : 22 23
DOT                  : 
DOUBLESLASH          : 
DOUBLESLASHEQUAL     : 
DOUBLESTAR           : 
DOUBLESTAREQUAL      : 
ELLIPSIS             : 
ENCODING             : 1
ENDMARKER            : 2
EQEQUAL              : 
EQUAL                : 
ERRORTOKEN           : 
GREATER              : 
GREATEREQUAL         : 
INDENT               : 12
LBRACE               : 
LEFTSHIFT            : 
LEFTSHIFTEQUAL       : 
LESS                 : 
LESSEQUAL            : 
LPAR                 : 
LSQB                 : 
MINEQUAL             : 
MINUS                : 
NAME                 : 9 10 20 22
NEWLINE              : 4 6 11 12
NL                   : 
NOTEQUAL             : 
NT_OFFSET            : 
NUMBER               : 21
OP                   : 
PERCENT              : 
PERCENTEQUAL         : 
PLUS                 : 23
PLUSEQUAL            : 
RARROW               : 
RBRACE               : 
RIGHTSHIFT           : 
RIGHTSHIFTEQUAL      : 
RPAR                 : 
RSQB                 : 
SEMI                 : 
SLASH                : 
SLASHEQUAL           : 
STAR                 : 
STAREQUAL            : 
STRING               : 19
TILDE                : 
VBAR                 : 
VBAREQUAL            : 
error                : 

Nonterminals, with rules where they appear

compound_stmt        : 7
empty                : 5 24
expression           : 18 19 20 21 22 23
funcdef              : 8
funcname             : 9
module               : 1 2 3 4 0
simple_stmt          : 15 16 17
statement            : 2 3 13 14
statement_plus       : 12 13
stmt_list            : 6 11 16
suite                : 9

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . ENCODING module
    (2) module -> . statement module ENDMARKER
    (3) module -> . statement module
    (4) module -> . NEWLINE module
    (5) module -> . empty
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (25) empty -> .
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    ENCODING        shift and go to state 8
    NEWLINE         shift and go to state 6
    $end            reduce using rule 25 (empty -> .)
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10

  ! ;               [ reduce using rule 25 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 25 (empty -> .) ]

    compound_stmt                  shift and go to state 9
    simple_stmt                    shift and go to state 5
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    funcdef                        shift and go to state 11
    statement                      shift and go to state 12
    stmt_list                      shift and go to state 13
    module                         shift and go to state 7

state 1

    (16) stmt_list -> ; . simple_stmt stmt_list
    (18) simple_stmt -> . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 2
    simple_stmt                    shift and go to state 18

state 2

    (18) simple_stmt -> expression .

    ;               reduce using rule 18 (simple_stmt -> expression .)
    NEWLINE         reduce using rule 18 (simple_stmt -> expression .)
    STRING          reduce using rule 18 (simple_stmt -> expression .)
    NAME            reduce using rule 18 (simple_stmt -> expression .)
    NUMBER          reduce using rule 18 (simple_stmt -> expression .)
    DOLLARSIGN      reduce using rule 18 (simple_stmt -> expression .)


state 3

    (5) module -> empty .
    (24) expression -> empty .

    $end            reduce using rule 5 (module -> empty .)
    ENDMARKER       reduce using rule 5 (module -> empty .)
    ;               reduce using rule 24 (expression -> empty .)
    NEWLINE         reduce using rule 24 (expression -> empty .)


state 4

    (19) expression -> STRING . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 19

state 5

    (15) stmt_list -> simple_stmt .
    (17) stmt_list -> simple_stmt . ;

    NEWLINE         reduce using rule 15 (stmt_list -> simple_stmt .)
    ;               shift and go to state 20


state 6

    (4) module -> NEWLINE . module
    (1) module -> . ENCODING module
    (2) module -> . statement module ENDMARKER
    (3) module -> . statement module
    (4) module -> . NEWLINE module
    (5) module -> . empty
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (25) empty -> .
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    ENCODING        shift and go to state 8
    NEWLINE         shift and go to state 6
    $end            reduce using rule 25 (empty -> .)
    ENDMARKER       reduce using rule 25 (empty -> .)
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10

  ! ;               [ reduce using rule 25 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 25 (empty -> .) ]

    compound_stmt                  shift and go to state 9
    simple_stmt                    shift and go to state 5
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    funcdef                        shift and go to state 11
    statement                      shift and go to state 12
    stmt_list                      shift and go to state 13
    module                         shift and go to state 21

state 7

    (0) S' -> module .



state 8

    (1) module -> ENCODING . module
    (1) module -> . ENCODING module
    (2) module -> . statement module ENDMARKER
    (3) module -> . statement module
    (4) module -> . NEWLINE module
    (5) module -> . empty
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (25) empty -> .
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    ENCODING        shift and go to state 8
    NEWLINE         shift and go to state 6
    $end            reduce using rule 25 (empty -> .)
    ENDMARKER       reduce using rule 25 (empty -> .)
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10

  ! ;               [ reduce using rule 25 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 25 (empty -> .) ]

    compound_stmt                  shift and go to state 9
    simple_stmt                    shift and go to state 5
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    funcdef                        shift and go to state 11
    statement                      shift and go to state 12
    stmt_list                      shift and go to state 13
    module                         shift and go to state 22

state 9

    (7) statement -> compound_stmt .

    ;               reduce using rule 7 (statement -> compound_stmt .)
    NAME            reduce using rule 7 (statement -> compound_stmt .)
    STRING          reduce using rule 7 (statement -> compound_stmt .)
    NUMBER          reduce using rule 7 (statement -> compound_stmt .)
    DOLLARSIGN      reduce using rule 7 (statement -> compound_stmt .)
    NEWLINE         reduce using rule 7 (statement -> compound_stmt .)
    DEDENT          reduce using rule 7 (statement -> compound_stmt .)
    ENCODING        reduce using rule 7 (statement -> compound_stmt .)
    ENDMARKER       reduce using rule 7 (statement -> compound_stmt .)
    $end            reduce using rule 7 (statement -> compound_stmt .)


state 10

    (22) expression -> DOLLARSIGN . NAME expression
    (23) expression -> DOLLARSIGN . PLUS expression

    NAME            shift and go to state 24
    PLUS            shift and go to state 23


state 11

    (8) compound_stmt -> funcdef .

    ;               reduce using rule 8 (compound_stmt -> funcdef .)
    NAME            reduce using rule 8 (compound_stmt -> funcdef .)
    STRING          reduce using rule 8 (compound_stmt -> funcdef .)
    NUMBER          reduce using rule 8 (compound_stmt -> funcdef .)
    DOLLARSIGN      reduce using rule 8 (compound_stmt -> funcdef .)
    NEWLINE         reduce using rule 8 (compound_stmt -> funcdef .)
    DEDENT          reduce using rule 8 (compound_stmt -> funcdef .)
    ENCODING        reduce using rule 8 (compound_stmt -> funcdef .)
    ENDMARKER       reduce using rule 8 (compound_stmt -> funcdef .)
    $end            reduce using rule 8 (compound_stmt -> funcdef .)


state 12

    (2) module -> statement . module ENDMARKER
    (3) module -> statement . module
    (1) module -> . ENCODING module
    (2) module -> . statement module ENDMARKER
    (3) module -> . statement module
    (4) module -> . NEWLINE module
    (5) module -> . empty
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (25) empty -> .
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ; resolved as shift
    ENCODING        shift and go to state 8
    NEWLINE         shift and go to state 6
    $end            reduce using rule 25 (empty -> .)
    ENDMARKER       reduce using rule 25 (empty -> .)
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10

  ! ;               [ reduce using rule 25 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 25 (empty -> .) ]

    compound_stmt                  shift and go to state 9
    simple_stmt                    shift and go to state 5
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    funcdef                        shift and go to state 11
    statement                      shift and go to state 12
    stmt_list                      shift and go to state 13
    module                         shift and go to state 25

state 13

    (6) statement -> stmt_list . NEWLINE

    NEWLINE         shift and go to state 26


state 14

    (21) expression -> NUMBER . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 27

state 15

    (9) funcdef -> NAME . funcname COLON suite
    (20) expression -> NAME . expression
    (10) funcname -> . NAME
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

    NAME            shift and go to state 28
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

    empty                          shift and go to state 16
    expression                     shift and go to state 29
    funcname                       shift and go to state 30

state 16

    (24) expression -> empty .

    ;               reduce using rule 24 (expression -> empty .)
    NEWLINE         reduce using rule 24 (expression -> empty .)
    STRING          reduce using rule 24 (expression -> empty .)
    NAME            reduce using rule 24 (expression -> empty .)
    NUMBER          reduce using rule 24 (expression -> empty .)
    DOLLARSIGN      reduce using rule 24 (expression -> empty .)


state 17

    (20) expression -> NAME . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 29

state 18

    (16) stmt_list -> ; simple_stmt . stmt_list
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (18) simple_stmt -> . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 1
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    NEWLINE         reduce using rule 25 (empty -> .)

  ! ;               [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 2
    simple_stmt                    shift and go to state 5
    stmt_list                      shift and go to state 31

state 19

    (19) expression -> STRING expression .

    ;               reduce using rule 19 (expression -> STRING expression .)
    NEWLINE         reduce using rule 19 (expression -> STRING expression .)
    STRING          reduce using rule 19 (expression -> STRING expression .)
    NAME            reduce using rule 19 (expression -> STRING expression .)
    NUMBER          reduce using rule 19 (expression -> STRING expression .)
    DOLLARSIGN      reduce using rule 19 (expression -> STRING expression .)


state 20

    (17) stmt_list -> simple_stmt ; .

    NEWLINE         reduce using rule 17 (stmt_list -> simple_stmt ; .)


state 21

    (4) module -> NEWLINE module .

    $end            reduce using rule 4 (module -> NEWLINE module .)
    ENDMARKER       reduce using rule 4 (module -> NEWLINE module .)


state 22

    (1) module -> ENCODING module .

    $end            reduce using rule 1 (module -> ENCODING module .)
    ENDMARKER       reduce using rule 1 (module -> ENCODING module .)


state 23

    (23) expression -> DOLLARSIGN PLUS . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 32

state 24

    (22) expression -> DOLLARSIGN NAME . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for DOLLARSIGN resolved as shift
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

  ! STRING          [ reduce using rule 25 (empty -> .) ]
  ! NAME            [ reduce using rule 25 (empty -> .) ]
  ! NUMBER          [ reduce using rule 25 (empty -> .) ]
  ! DOLLARSIGN      [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 33

state 25

    (2) module -> statement module . ENDMARKER
    (3) module -> statement module .

  ! shift/reduce conflict for ENDMARKER resolved as shift
    ENDMARKER       shift and go to state 34
    $end            reduce using rule 3 (module -> statement module .)

  ! ENDMARKER       [ reduce using rule 3 (module -> statement module .) ]


state 26

    (6) statement -> stmt_list NEWLINE .

    ;               reduce using rule 6 (statement -> stmt_list NEWLINE .)
    NAME            reduce using rule 6 (statement -> stmt_list NEWLINE .)
    STRING          reduce using rule 6 (statement -> stmt_list NEWLINE .)
    NUMBER          reduce using rule 6 (statement -> stmt_list NEWLINE .)
    DOLLARSIGN      reduce using rule 6 (statement -> stmt_list NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> stmt_list NEWLINE .)
    DEDENT          reduce using rule 6 (statement -> stmt_list NEWLINE .)
    ENCODING        reduce using rule 6 (statement -> stmt_list NEWLINE .)
    ENDMARKER       reduce using rule 6 (statement -> stmt_list NEWLINE .)
    $end            reduce using rule 6 (statement -> stmt_list NEWLINE .)


state 27

    (21) expression -> NUMBER expression .

    ;               reduce using rule 21 (expression -> NUMBER expression .)
    NEWLINE         reduce using rule 21 (expression -> NUMBER expression .)
    STRING          reduce using rule 21 (expression -> NUMBER expression .)
    NAME            reduce using rule 21 (expression -> NUMBER expression .)
    NUMBER          reduce using rule 21 (expression -> NUMBER expression .)
    DOLLARSIGN      reduce using rule 21 (expression -> NUMBER expression .)


state 28

    (10) funcname -> NAME .
    (20) expression -> NAME . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

    COLON           reduce using rule 10 (funcname -> NAME .)
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    ;               reduce using rule 25 (empty -> .)
    NEWLINE         reduce using rule 25 (empty -> .)

    empty                          shift and go to state 16
    expression                     shift and go to state 29

state 29

    (20) expression -> NAME expression .

    ;               reduce using rule 20 (expression -> NAME expression .)
    NEWLINE         reduce using rule 20 (expression -> NAME expression .)
    STRING          reduce using rule 20 (expression -> NAME expression .)
    NAME            reduce using rule 20 (expression -> NAME expression .)
    NUMBER          reduce using rule 20 (expression -> NAME expression .)
    DOLLARSIGN      reduce using rule 20 (expression -> NAME expression .)


state 30

    (9) funcdef -> NAME funcname . COLON suite

    COLON           shift and go to state 35


state 31

    (16) stmt_list -> ; simple_stmt stmt_list .

    NEWLINE         reduce using rule 16 (stmt_list -> ; simple_stmt stmt_list .)


state 32

    (23) expression -> DOLLARSIGN PLUS expression .

    ;               reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)
    NEWLINE         reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)
    STRING          reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)
    NAME            reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)
    NUMBER          reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)
    DOLLARSIGN      reduce using rule 23 (expression -> DOLLARSIGN PLUS expression .)


state 33

    (22) expression -> DOLLARSIGN NAME expression .

    ;               reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)
    NEWLINE         reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)
    STRING          reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)
    NAME            reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)
    NUMBER          reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)
    DOLLARSIGN      reduce using rule 22 (expression -> DOLLARSIGN NAME expression .)


state 34

    (2) module -> statement module ENDMARKER .

    $end            reduce using rule 2 (module -> statement module ENDMARKER .)
    ENDMARKER       reduce using rule 2 (module -> statement module ENDMARKER .)


state 35

    (9) funcdef -> NAME funcname COLON . suite
    (11) suite -> . stmt_list NEWLINE
    (12) suite -> . NEWLINE INDENT statement_plus DEDENT
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (18) simple_stmt -> . expression
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for ; resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 36
    ;               shift and go to state 1
    STRING          shift and go to state 4
    NAME            shift and go to state 17
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10

  ! ;               [ reduce using rule 25 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    expression                     shift and go to state 2
    suite                          shift and go to state 37
    stmt_list                      shift and go to state 38
    simple_stmt                    shift and go to state 5

state 36

    (12) suite -> NEWLINE . INDENT statement_plus DEDENT

    INDENT          shift and go to state 39


state 37

    (9) funcdef -> NAME funcname COLON suite .

    ENCODING        reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    NEWLINE         reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    ;               reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    NAME            reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    STRING          reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    NUMBER          reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    DOLLARSIGN      reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    ENDMARKER       reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    $end            reduce using rule 9 (funcdef -> NAME funcname COLON suite .)
    DEDENT          reduce using rule 9 (funcdef -> NAME funcname COLON suite .)


state 38

    (11) suite -> stmt_list . NEWLINE

    NEWLINE         shift and go to state 40


state 39

    (12) suite -> NEWLINE INDENT . statement_plus DEDENT
    (13) statement_plus -> . statement statement_plus
    (14) statement_plus -> . statement
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    NEWLINE         reduce using rule 25 (empty -> .)

  ! ;               [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    compound_stmt                  shift and go to state 9
    expression                     shift and go to state 2
    statement_plus                 shift and go to state 41
    funcdef                        shift and go to state 11
    statement                      shift and go to state 42
    stmt_list                      shift and go to state 13
    simple_stmt                    shift and go to state 5

state 40

    (11) suite -> stmt_list NEWLINE .

    ENCODING        reduce using rule 11 (suite -> stmt_list NEWLINE .)
    NEWLINE         reduce using rule 11 (suite -> stmt_list NEWLINE .)
    ;               reduce using rule 11 (suite -> stmt_list NEWLINE .)
    NAME            reduce using rule 11 (suite -> stmt_list NEWLINE .)
    STRING          reduce using rule 11 (suite -> stmt_list NEWLINE .)
    NUMBER          reduce using rule 11 (suite -> stmt_list NEWLINE .)
    DOLLARSIGN      reduce using rule 11 (suite -> stmt_list NEWLINE .)
    ENDMARKER       reduce using rule 11 (suite -> stmt_list NEWLINE .)
    $end            reduce using rule 11 (suite -> stmt_list NEWLINE .)
    DEDENT          reduce using rule 11 (suite -> stmt_list NEWLINE .)


state 41

    (12) suite -> NEWLINE INDENT statement_plus . DEDENT

    DEDENT          shift and go to state 43


state 42

    (13) statement_plus -> statement . statement_plus
    (14) statement_plus -> statement .
    (13) statement_plus -> . statement statement_plus
    (14) statement_plus -> . statement
    (6) statement -> . stmt_list NEWLINE
    (7) statement -> . compound_stmt
    (15) stmt_list -> . simple_stmt
    (16) stmt_list -> . ; simple_stmt stmt_list
    (17) stmt_list -> . simple_stmt ;
    (8) compound_stmt -> . funcdef
    (18) simple_stmt -> . expression
    (9) funcdef -> . NAME funcname COLON suite
    (19) expression -> . STRING expression
    (20) expression -> . NAME expression
    (21) expression -> . NUMBER expression
    (22) expression -> . DOLLARSIGN NAME expression
    (23) expression -> . DOLLARSIGN PLUS expression
    (24) expression -> . empty
    (25) empty -> .

  ! shift/reduce conflict for ; resolved as shift
    DEDENT          reduce using rule 14 (statement_plus -> statement .)
    ;               shift and go to state 1
    NAME            shift and go to state 15
    STRING          shift and go to state 4
    NUMBER          shift and go to state 14
    DOLLARSIGN      shift and go to state 10
    NEWLINE         reduce using rule 25 (empty -> .)

  ! ;               [ reduce using rule 25 (empty -> .) ]

    empty                          shift and go to state 16
    compound_stmt                  shift and go to state 9
    expression                     shift and go to state 2
    statement_plus                 shift and go to state 44
    funcdef                        shift and go to state 11
    statement                      shift and go to state 42
    stmt_list                      shift and go to state 13
    simple_stmt                    shift and go to state 5

state 43

    (12) suite -> NEWLINE INDENT statement_plus DEDENT .

    ENCODING        reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    NEWLINE         reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    ;               reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    NAME            reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    STRING          reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    NUMBER          reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    DOLLARSIGN      reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    ENDMARKER       reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    $end            reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)
    DEDENT          reduce using rule 12 (suite -> NEWLINE INDENT statement_plus DEDENT .)


state 44

    (13) statement_plus -> statement statement_plus .

    DEDENT          reduce using rule 13 (statement_plus -> statement statement_plus .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 0 resolved as shift
WARNING: shift/reduce conflict for ; in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 1 resolved as shift
WARNING: shift/reduce conflict for NAME in state 1 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 1 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 1 resolved as shift
WARNING: shift/reduce conflict for STRING in state 4 resolved as shift
WARNING: shift/reduce conflict for NAME in state 4 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 4 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 4 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 6 resolved as shift
WARNING: shift/reduce conflict for ; in state 6 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 8 resolved as shift
WARNING: shift/reduce conflict for ; in state 8 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 12 resolved as shift
WARNING: shift/reduce conflict for ; in state 12 resolved as shift
WARNING: shift/reduce conflict for STRING in state 14 resolved as shift
WARNING: shift/reduce conflict for NAME in state 14 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 14 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 14 resolved as shift
WARNING: shift/reduce conflict for STRING in state 17 resolved as shift
WARNING: shift/reduce conflict for NAME in state 17 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 17 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 17 resolved as shift
WARNING: shift/reduce conflict for ; in state 18 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for NAME in state 23 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 23 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 24 resolved as shift
WARNING: shift/reduce conflict for NAME in state 24 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 24 resolved as shift
WARNING: shift/reduce conflict for DOLLARSIGN in state 24 resolved as shift
WARNING: shift/reduce conflict for ENDMARKER in state 25 resolved as shift
WARNING: shift/reduce conflict for ; in state 35 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 35 resolved as shift
WARNING: shift/reduce conflict for ; in state 39 resolved as shift
WARNING: shift/reduce conflict for ; in state 42 resolved as shift
